output$plot <- renderPlotly({
graph(sprint.speed, input$var1, input$var2)
})
}
library(shinythemes)
# Ui
ui = fluidPage(
theme= shinytheme("simplex"), "2021 MLB Sprint Speed",
tabPanel("Ridgeline Plot of teams",
mainPanel(
selectInput("teams",
"Teams",
names,
names[c(2,4,11,14)],
multiple = TRUE),
plotOutput("ridges")
)),
tabPanel("Scatterplot of players",
mainPanel(
fluidRow(
column(3, selectInput("var1","x-axis variable:", choices = colms, selected = colms[3])),
column(3, selectInput("var2","y-axis variable:", choices = colms, selected = colms[2]))
),
plotlyOutput("plot")
))
)
server = function(input, output) {
sprint_subset = reactive({
sprint.speed %>%
filter(name %in% input$teams) %>%
mutate(team = fct_reorder(team, sprint_speed))
})
output$ridges = renderPlot(ridgeline(sprint_subset()))
output$plot <- renderPlotly({
graph(sprint.speed, input$var1, input$var2)
})
}
shinyApp(ui, server)
# Ui
ui = navbarPage(
theme= shinytheme("simplex"), "2021 MLB Sprint Speed",
tabPanel("Ridgeline Plot of teams",
mainPanel(
selectInput("teams",
"Teams",
names,
names[c(2,4,11,14)],
multiple = TRUE),
plotOutput("ridges")
)),
tabPanel("Scatterplot of players",
mainPanel(
fluidRow(
column(3, selectInput("var1","x-axis variable:", choices = colms, selected = colms[3])),
column(3, selectInput("var2","y-axis variable:", choices = colms, selected = colms[2]))
),
plotlyOutput("plot")
))
)
server = function(input, output) {
sprint_subset = reactive({
sprint.speed %>%
filter(name %in% input$teams) %>%
mutate(team = fct_reorder(team, sprint_speed))
})
output$ridges = renderPlot(ridgeline(sprint_subset()))
output$plot <- renderPlotly({
graph(sprint.speed, input$var1, input$var2)
})
}
shinyApp(ui, server)
colnames(sprint.speed)
sprint.speed2 = sprint.speed %>%
rename(age = Age)
sprint.speed2 = sprint.speed %>%
rename(Age = age,
`Competitive Runs` = competitive_runs,
`Home to 1st Base` = hp_to_1b,
`Sprint Speed` = sprint_speed)
colnames(sprint.speed2)
colms = colnames(sprint.speed2)[7:10]
ui1 = fluidPage(
fluidRow(
column(3, selectInput("var1","x-axis variable:", choices = colms, selected = colms[3])),
column(3, selectInput("var2","y-axis variable:", choices = colms, selected = colms[2]))
),
plotlyOutput("plot")
)
server1 = function(input, output) {
output$plot <- renderPlotly({
graph(sprint.speed2, input$var1, input$var2)
})
}
sprint.speed2%>%
%>%
unite(player_name, c(first_name, last_name), sep = " ", remove = FALSE) %>%
dplyr::select(player_name, Age:Name) %>%
sprint.speed2%>%
unite(player_name, c(first_name, last_name), sep = " ", remove = FALSE) %>%
dplyr::select(player_name, Age:Name) %>%
drop_na()
sprint.speed2 %>%
unite(player_name, c(first_name, last_name), sep = " ", remove = FALSE) %>%
dplyr::select(player_name, Age:Name) %>% drop_na()
sprint.speed2 %>%
unite(player_name, c(first_name, last_name), sep = " ", remove = FALSE) %>%
dplyr::select(player_name, Age:name) %>% drop_na()
sprint.speed2 %>%
unite(player_name, c(first_name, last_name), sep = " ", remove = FALSE) %>%
dplyr::select(player_name, position, Age:Name) %>%
drop_na() %>%
mutate(position = factor(position, levels = positionorder)) %>%
ggplot(aes(`Home to 1st Base`,
`Competitive Runs`,
col = position,
text = paste(
"Player:", player_name,
"\nTeam: ", name,
"\nAge: ", Age,
"\nPosition: ", position,
"\nSprint Speed: ", `Sprint Speed`," ft/s",
"\nTime to 1st Base: ", `Home to 1st Base`, " s",
"\nCompetitive Runs: ", `Competitive Runs`,
sep = ''))) +
geom_point() +
scale_color_tableau(
palette = "Tableau 10",
type = "regular",
direction = 1,
) +
theme_minimal()
sprint.speed2 %>%
unite(player_name, c(first_name, last_name), sep = " ", remove = FALSE) %>%
dplyr::select(player_name, position, Age:name) %>%
drop_na() %>%
mutate(position = factor(position, levels = positionorder)) %>%
ggplot(aes(`Home to 1st Base`,
`Competitive Runs`,
col = position,
text = paste(
"Player:", player_name,
"\nTeam: ", name,
"\nAge: ", Age,
"\nPosition: ", position,
"\nSprint Speed: ", `Sprint Speed`," ft/s",
"\nTime to 1st Base: ", `Home to 1st Base`, " s",
"\nCompetitive Runs: ", `Competitive Runs`,
sep = ''))) +
geom_point() +
scale_color_tableau(
palette = "Tableau 10",
type = "regular",
direction = 1,
) +
theme_minimal()
graph = function(df, v1, v2){
pp = df %>%
unite(player_name, c(first_name, last_name), sep = " ", remove = FALSE) %>%
dplyr::select(player_name, position, Age:name) %>%
drop_na() %>%
mutate(position = factor(position, levels = positionorder)) %>%
ggplot(aes(.data[[v1]],
.data[[v2]],
col = position,
text = paste(
"Player:", player_name,
"\nTeam: ", name,
"\nAge: ", Age,
"\nPosition: ", position,
"\nSprint Speed: ", `Sprint Speed`," ft/s",
"\nTime to 1st Base: ", `Home to 1st Base`, " s",
"\nCompetitive Runs: ", `Competitive Runs`,
sep = ''))) +
geom_point() +
scale_color_tableau(
palette = "Tableau 10",
type = "regular",
direction = 1,
) +
theme_minimal()
ggplotly(pp, tooltip = "text") %>%
style(hoveron = "fill")
}
sprint.speed2 = sprint.speed %>%
rename(Age = age,
`Competitive Runs` = competitive_runs,
`Home to 1st Base` = hp_to_1b,
`Sprint Speed` = sprint_speed)
colms = colnames(sprint.speed2)[7:10]
# Ui
ui = navbarPage(
theme= shinytheme("simplex"), "2021 MLB Sprint Speed",
tabPanel("Ridgeline Plot of teams",
mainPanel(
selectInput("teams",
"Teams",
names,
names[c(2,4,11,14)],
multiple = TRUE),
plotOutput("ridges")
)),
tabPanel("Scatterplot of players",
mainPanel(
fluidRow(
column(3, selectInput("var1","x-axis variable:", choices = colms, selected = colms[3])),
column(3, selectInput("var2","y-axis variable:", choices = colms, selected = colms[2]))
),
plotlyOutput("plot")
))
)
server = function(input, output) {
sprint_subset = reactive({
sprint.speed %>%
filter(name %in% input$teams) %>%
mutate(team = fct_reorder(team, sprint_speed))
})
output$ridges = renderPlot(ridgeline(sprint_subset()))
output$plot <- renderPlotly({
graph(sprint.speed2, input$var1, input$var2)
})
}
shinyApp(ui, server)
sprint.speed = read_csv('https://uwmadison.box.com/shared/static/axvccy5sthvmz00zxzrl0m2yaan6m8x4.csv') #downloaded directly from https://baseballsavant.mlb.com/leaderboard/sprint_speed?year=2021&position=&team=&min=0&sort=7&sortDir=desc
teamcolor = teamcolors %>%
filter(league == "mlb")
teamcolor$abr = c("ARI", "ATL", "BAL", "BOS", "CHC", "CWS", "CIN", "CLE", "COL",
"DET", "HOU", "KC", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK",
"PHI", "PIT", "SD", "SF", "SEA", "STL", "TB", "TEX", "TOR", "WSH")
sprint.speed = sprint.speed %>%
left_join(teamcolor, by = c("team"="abr"))
for(i in seq(length(sprint.speed$position))){
if (sprint.speed$position[i] == ""){
sprint.speed$position[i] = "UTL"
}
}
library(ggridges)
library(forcats)
library(shiny)
names = sprint.speed %>%
pull(name) %>%
unique() %>%
sort()
ridgeline = function(df){
ggplot(df, aes(sprint_speed,
team,
color = name,
fill = name),
alpha = 0.7) +
#geom_point() +
geom_density_ridges() +
scale_fill_teams(guide = "none") +
scale_color_teams(2, guide = "none") +
ggtitle('Sprint Speed of MLB Players during the 2021 Season', subtitle ='Grouped by team') +
labs(y = 'Team', x = 'Sprint Speed on Basepaths (ft/s)') +
theme_minimal()
}
positionorder = sprint.speed %>%
group_by(position) %>%
arrange(factor(position, levels = c("C",
"1B",
"2B",
"3B",
"SS",
"CF",
"LF",
"RF",
"DH",
'UTL'))) %>%
distinct(position, .keep_all = T) %>%
pull(position)
graph = function(df, v1, v2){
pp = df %>%
unite(player_name, c(first_name, last_name), sep = " ", remove = FALSE) %>%
dplyr::select(player_name, position, Age:name) %>%
drop_na() %>%
mutate(position = factor(position, levels = positionorder)) %>%
ggplot(aes(.data[[v1]],
.data[[v2]],
col = position,
text = paste(
"Player:", player_name,
"\nTeam: ", name,
"\nAge: ", Age,
"\nPosition: ", position,
"\nSprint Speed: ", `Sprint Speed`," ft/s",
"\nTime to 1st Base: ", `Home to 1st Base`, " s",
"\nCompetitive Runs: ", `Competitive Runs`,
sep = ''))) +
geom_point() +
scale_color_tableau(
palette = "Tableau 10",
type = "regular",
direction = 1,
) +
theme_minimal()
ggplotly(pp, tooltip = "text") %>%
style(hoveron = "fill")
}
sprint.speed2 = sprint.speed %>%
rename(Age = age,
`Competitive Runs` = competitive_runs,
`Home to 1st Base` = hp_to_1b,
`Sprint Speed` = sprint_speed)
colms = colnames(sprint.speed2)[7:10]
# Ui
ui = navbarPage(
theme= shinytheme("simplex"), "2021 MLB Sprint Speed",
tabPanel("Ridgeline Plot of teams",
mainPanel(
selectInput("teams",
"Teams",
names,
names[c(2,4,11,14)],
multiple = TRUE),
plotOutput("ridges")
)),
tabPanel("Scatterplot of players",
mainPanel(
fluidRow(
column(3, selectInput("var1","x-axis variable:", choices = colms, selected = colms[3])),
column(3, selectInput("var2","y-axis variable:", choices = colms, selected = colms[2]))
),
plotlyOutput("plot")
))
)
server = function(input, output) {
sprint_subset = reactive({
sprint.speed %>%
filter(name %in% input$teams) %>%
mutate(team = fct_reorder(team, sprint_speed))
})
output$ridges = renderPlot(ridgeline(sprint_subset()))
output$plot <- renderPlotly({
graph(sprint.speed2, input$var1, input$var2)
})
}
shinyApp(ui, server)
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
sprint.speed = read_csv('https://uwmadison.box.com/shared/static/axvccy5sthvmz00zxzrl0m2yaan6m8x4.csv') #downloaded directly from https://baseballsavant.mlb.com/leaderboard/sprint_speed?year=2021&position=&team=&min=0&sort=7&sortDir=desc
teamcolor = teamcolors %>%
filter(league == "mlb")
teamcolor$abr = c("ARI", "ATL", "BAL", "BOS", "CHC", "CWS", "CIN", "CLE", "COL",
"DET", "HOU", "KC", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK",
"PHI", "PIT", "SD", "SF", "SEA", "STL", "TB", "TEX", "TOR", "WSH")
sprint.speed = sprint.speed %>%
left_join(teamcolor, by = c("team"="abr"))
for(i in seq(length(sprint.speed$position))){
if (sprint.speed$position[i] == ""){
sprint.speed$position[i] = "UTL"
}
}
library(ggridges)
library(forcats)
library(shiny)
names = sprint.speed %>%
pull(name) %>%
unique() %>%
sort()
ridgeline = function(df){
ggplot(df, aes(sprint_speed,
team,
color = name,
fill = name),
alpha = 0.7) +
#geom_point() +
geom_density_ridges() +
scale_fill_teams(guide = "none") +
scale_color_teams(2, guide = "none") +
ggtitle('Sprint Speed of MLB Players during the 2021 Season', subtitle ='Grouped by team') +
labs(y = 'Team', x = 'Sprint Speed on Basepaths (ft/s)') +
theme_minimal()
}
positionorder = sprint.speed %>%
group_by(position) %>%
arrange(factor(position, levels = c("C",
"1B",
"2B",
"3B",
"SS",
"CF",
"LF",
"RF",
"DH",
'UTL'))) %>%
distinct(position, .keep_all = T) %>%
pull(position)
graph = function(df, v1, v2){
pp = df %>%
unite(player_name, c(first_name, last_name), sep = " ", remove = FALSE) %>%
dplyr::select(player_name, position, Age:name) %>%
drop_na() %>%
mutate(position = factor(position, levels = positionorder)) %>%
ggplot(aes(.data[[v1]],
.data[[v2]],
col = position,
text = paste(
"Player: ", player_name,
"\nTeam: ", name,
"\nAge: ", Age,
"\nPosition: ", position,
"\nSprint Speed: ", `Sprint Speed`," ft/s",
"\nTime to 1st Base: ", `Home to 1st Base`, " s",
"\nCompetitive Runs: ", `Competitive Runs`,
sep = ''))) +
geom_point() +
scale_color_tableau(
palette = "Tableau 10",
type = "regular",
direction = 1,
) +
theme_minimal()
ggplotly(pp, tooltip = "text") %>%
style(hoveron = "fill")
}
sprint.speed2 = sprint.speed %>%
rename(Age = age,
`Competitive Runs` = competitive_runs,
`Home to 1st Base` = hp_to_1b,
`Sprint Speed` = sprint_speed)
colms = colnames(sprint.speed2)[7:10]
# Ui
ui = navbarPage(
theme= shinytheme("simplex"), "2021 MLB Sprint Speed",
tabPanel("Ridgeline Plot of teams",
mainPanel(
selectInput("teams",
"Teams",
names,
names[c(2,4,11,14)],
multiple = TRUE),
plotOutput("ridges")
)),
tabPanel("Scatterplot of players",
mainPanel(
fluidRow(
column(3, selectInput("var1","x-axis variable:", choices = colms, selected = colms[3])),
column(3, selectInput("var2","y-axis variable:", choices = colms, selected = colms[2]))
),
plotlyOutput("plot")
))
)
server = function(input, output) {
sprint_subset = reactive({
sprint.speed %>%
filter(name %in% input$teams) %>%
mutate(team = fct_reorder(team, sprint_speed))
})
output$ridges = renderPlot(ridgeline(sprint_subset()))
output$plot <- renderPlotly({
graph(sprint.speed2, input$var1, input$var2)
})
}
shinyApp(ui, server)
sprint.speed = read_csv('https://uwmadison.box.com/shared/static/axvccy5sthvmz00zxzrl0m2yaan6m8x4.csv') #downloaded directly from https://baseballsavant.mlb.com/leaderboard/sprint_speed?year=2021&position=&team=&min=0&sort=7&sortDir=desc
teamcolor = teamcolors %>%
filter(league == "mlb")
teamcolor$abr = c("ARI", "ATL", "BAL", "BOS", "CHC", "CWS", "CIN", "CLE", "COL",
"DET", "HOU", "KC", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK",
"PHI", "PIT", "SD", "SF", "SEA", "STL", "TB", "TEX", "TOR", "WSH")
sprint.speed = sprint.speed %>%
left_join(teamcolor, by = c("team"="abr"))
for(i in seq(length(sprint.speed$position))){
if (sprint.speed$position[i] == ""){
sprint.speed$position[i] = "UTL"
}
}
for(i in seq(length(sprint.speed$position))){
if (sprint.speed$position[i] == ""){
sprint.speed$position[i] = "UTL"
}
}
sprint.speed = read.csv('https://uwmadison.box.com/shared/static/axvccy5sthvmz00zxzrl0m2yaan6m8x4.csv') #downloaded directly from https://baseballsavant.mlb.com/leaderboard/sprint_speed?year=2021&position=&team=&min=0&sort=7&sortDir=desc
teamcolor = teamcolors %>%
filter(league == "mlb")
teamcolor$abr = c("ARI", "ATL", "BAL", "BOS", "CHC", "CWS", "CIN", "CLE", "COL",
"DET", "HOU", "KC", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK",
"PHI", "PIT", "SD", "SF", "SEA", "STL", "TB", "TEX", "TOR", "WSH")
sprint.speed = sprint.speed %>%
left_join(teamcolor, by = c("team"="abr"))
for(i in seq(length(sprint.speed$position))){
if (sprint.speed$position[i] == ""){
sprint.speed$position[i] = "UTL"
}
}
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
?geom_density_ridges
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
runApp('~/Desktop/r stuff/data vis/portfolio 4/portfolio4_1.R')
sprint.speed %>% filter(team == "SFN")
sprint.speed %>% filter(team == "SFG")
sprint.speed %>% filter(team == "SF")
sprint.speed %>% filter(team == "SF") %>% filter(position == "C")
