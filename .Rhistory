}
shinyApp(ui, server)
scatterplot = function(df) {
p = ggplot(df, aes(Avg.Salary.K., cost.of.living, col = State)) +
geom_point()
ggplotly(p, tooltip = "all") %>%
style(hoveron = "fill")
}
ui = fluidPage(
plotlyOutput("state_scatter")
)
server = function(input, output) {
output$state_scatter <- renderPlotly({
scatterplot(datasal2)
})
}
shinyApp(ui, server)
datasal
colnames(datasal)
unique(datsal$`Job Title`)
unique(datasal$`Job Title`)
shinyApp(ui, server)
colnames(datasal)
unique(datasal$`Industry`)
unique(datasal$`Sector`)
datasal[which(datasal$`Sector` == "-1"),]
rm(list = ls())
library(readr)
library(tidyverse)
library(ggplot2)
library(rnaturalearth)
library(forcats)
library(lubridate)
library(plotly)
library(shiny)
datasal = read_csv("DSsalary.csv")
datasal2 = data.frame(datasal)
# Initial Overview plot looking at average salary vs cost of living
datasal %>%
ggplot() +
geom_point(aes(`Avg Salary(K)`, cost.of.living, col = State))
# testing
datasal %>%
group_by(State) %>%
summarise(n = n()) %>%
arrange(-n)
threshold <- 20
out = datasal %>%
group_by(State) %>%
summarise(n = n()) %>%
arrange(-n)
data.frame(out) %>%
count(State = fct_collapse(State, Other = unique(State[n < threshold])),
wt = n, name = "n1") %>%
arrange(-n1)
scatterplot = function(df) {
p = ggplot(df, aes(Avg.Salary.K., cost.of.living, col = State)) +
geom_point()
ggplotly(p, tooltip = "all") %>%
style(hoveron = "fill")
}
ui = fluidPage(
plotlyOutput("state_scatter")
)
server = function(input, output) {
output$state_scatter <- renderPlotly({
scatterplot(datasal2)
})
}
shinyApp(ui, server)
# rnaturalearth notes
library(rnaturalearth)
states <- ne_states("United States of America") %>%
st_as_sf() %>%
rmapshaper::ms_simplify() %>% # reduce size for easy plotting
filter(!(name %in% c("Alaska", "Hawaii"))) %>%
select(name, geometry) %>%
rename(state = name)
# rnaturalearth notes
library(rnaturalearth)
library(sf)
states <- ne_states("United States of America") %>%
st_as_sf() %>%
rmapshaper::ms_simplify() %>% # reduce size for easy plotting
filter(!(name %in% c("Alaska", "Hawaii"))) %>%
select(name, geometry) %>%
rename(state = name)
states <- ne_states("United States of America") %>%
st_as_sf() %>%
# rmapshaper::ms_simplify() %>% # reduce size for easy plotting
filter(!(name %in% c("Alaska", "Hawaii"))) %>%
select(name, geometry) %>%
rename(state = name)
states
states <- ne_states("United States of America") %>%
st_as_sf() %>%
# rmapshaper::ms_simplify() %>% # reduce size for easy plotting
# filter(!(name %in% c("Alaska", "Hawaii"))) %>%
# select(name, geometry) %>%
rename(state = name)
states$region
colnames(state)
colnames(states)
states$postal
datasal %>%
left_join(states, by = c("State" = "postal")
datasal %>%
left_join(states, by = c("State" = "postal"))
states <- ne_states("United States of America") %>%
st_as_sf() %>%
# rmapshaper::ms_simplify() %>% # reduce size for easy plotting
# filter(!(name %in% c("Alaska", "Hawaii"))) %>%
select(region, postal) %>%
rename(state = name)
datasal %>%
left_join(states, by = c("State" = "postal"))
states <- ne_states("United States of America") %>%
st_as_sf() %>%
# rmapshaper::ms_simplify() %>% # reduce size for easy plotting
# filter(!(name %in% c("Alaska", "Hawaii"))) %>%
select(region, postal)
datasal %>%
left_join(states, by = c("State" = "postal"))
datasal2 = data.frame(datasal)
datasal2
datasal = datasal %>%
left_join(states, by = c("State" = "postal"))
datasal2 = data.frame(datasal)
datasal2
states
scatterplot = function(df) {
p = ggplot(df, aes(Avg.Salary.K., cost.of.living, col = region)) +
geom_point()
ggplotly(p, tooltip = "all") %>%
style(hoveron = "fill")
}
ui = fluidPage(
plotlyOutput("state_scatter")
)
server = function(input, output) {
output$state_scatter <- renderPlotly({
scatterplot(datasal2)
})
}
shinyApp(ui, server)
data.frame(out) %>%
count(State = fct_collapse(State, Other = unique(State[n < threshold])),
wt = n, name = "n1") %>%
arrange(-n1)
out = datasal %>%
group_by(State) %>%
summarise(n = n()) %>%
arrange(-n)
out
# rnaturalearth notes
library(rnaturalearth)
library(sf)
states <- ne_states("United States of America") %>%
st_as_sf() %>%
# rmapshaper::ms_simplify() %>% # reduce size for easy plotting
# filter(!(name %in% c("Alaska", "Hawaii"))) %>%
select(region, postal)
datasal = datasal %>%
left_join(states, by = c("State" = "postal"))
datasal2 = data.frame(datasal)
scatterplot = function(df) {
p = ggplot(df, aes(Avg.Salary.K., cost.of.living, col = region)) +
geom_point()
ggplotly(p, tooltip = "all") %>%
style(hoveron = "fill")
}
ui = fluidPage(
plotlyOutput("state_scatter")
)
server = function(input, output) {
output$state_scatter <- renderPlotly({
scatterplot(datasal2)
})
}
shinyApp(ui, server)
datasal = datasal %>%
left_join(states, by = c("State" = "postal"))
datasal2 = data.frame(datasal)
datasal2
datsal2$region
datasal2$region
scatterplot = function(df) {
p = ggplot(df, aes(Avg.Salary.K., cost.of.living, col = region)) +
geom_point()
ggplotly(p, tooltip = "all") %>%
style(hoveron = "fill")
}
ui = fluidPage(
plotlyOutput("state_scatter")
)
server = function(input, output) {
output$state_scatter <- renderPlotly({
scatterplot(datasal2)
})
}
shinyApp(ui, server)
source("~/.active-rstudio-document", echo=TRUE)
shinyApp(ui, server)
source("~/.active-rstudio-document", echo=TRUE)
out = datasal %>%
group_by(State) %>%
summarise(n = n()) %>%
arrange(-n)
out
for (i in datasal$State) {
print(i)
# if (datasal$State == "CA") {
#
# }
}
for (i in seq(length(datasal$State))) {
print(i)
if (datasal$State[i] == "CA") {
print(i)
}
}
for (i in seq(length(datasal$State))) {
if (datasal$State[i] == "CA") {
print(i)
}
}
for (i in seq(length(datasal$State))) {
if (datasal$State[i] == "CA") {
print(i)
}
if (datasal$State[i] == "MA") {
print(i)
}
if (datasal$State[i] == "NY") {
print(i)
}
}
for (i in seq(length(datasal$State))) {
if (datasal$State[i] == "CA") {
datasal$region = "California"
}
if (datasal$State[i] == "MA") {
datasal$region = "Massachusetts"
}
if (datasal$State[i] == "NY") {
datasal$region = "New York"
}
}
datasal2 = data.frame(datasal)
scatterplot = function(df) {
p = ggplot(df, aes(Avg.Salary.K., cost.of.living, col = region)) +
geom_point()
ggplotly(p, tooltip = "all") %>%
style(hoveron = "fill")
}
ui = fluidPage(
plotlyOutput("state_scatter")
)
server = function(input, output) {
output$state_scatter <- renderPlotly({
scatterplot(datasal2)
})
}
shinyApp(ui, server)
# rnaturalearth notes
library(rnaturalearth)
library(sf)
states <- ne_states("United States of America") %>%
st_as_sf() %>%
select(region, postal)
datasal = datasal %>%
left_join(states, by = c("State" = "postal"))
source("~/.active-rstudio-document", echo=TRUE)
datasal1
datasal
colnames(datasal)
datasal2
colnames(datasal2)
datasal2$Avg.Salary.K.
colnames(datasal2)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(readr)
library(tidyverse)
library(ggplot2)
library(forcats)
library(lubridate)
library(plotly)
library(shiny)
datasal = read_csv("DSsalary.csv")
datasal2 = data.frame(datasal)
# testing
datasal %>%
group_by(State) %>%
summarise(n = n()) %>%
arrange(-n)
threshold <- 20
out = datasal %>%
group_by(State) %>%
summarise(n = n()) %>%
arrange(-n)
data.frame(out) %>%
count(State = fct_collapse(State, Other = unique(State[n < threshold])),
wt = n, name = "n1") %>%
arrange(-n1)
# rnaturalearth notes
library(rnaturalearth)
library(sf)
states <- ne_states("United States of America") %>%
st_as_sf() %>%
select(region, postal)
datasal = datasal %>%
left_join(states, by = c("State" = "postal"))
for (i in seq(length(datasal$State))) {
if (datasal$State[i] == "CA") {
datasal$region[i] = "California"
}
if (datasal$State[i] == "MA") {
datasal$region[i] = "Massachusetts"
}
if (datasal$State[i] == "NY") {
datasal$region[i] = "New York"
}
}
datasal2 = data.frame(datasal)
scatterplot = function(df) {
p = ggplot(df, aes(Avg.Salary.K.,
cost.of.living,
col = region,
text = paste(
"Company:", Company.Name,
"\nJob Title:", Job.Title,
"\nAverage Salary: $", Avg.Salary.K*1000,
"\nLocation", City,",","State")))+
geom_point())
ggplotly(p, tooltip = "text") %>%
style(hoveron = "fill")
}
scatterplot = function(df) {
p = ggplot(df, aes(Avg.Salary.K.,
cost.of.living,
col = region,
text = paste(
"Company:", Company.Name,
"\nJob Title:", Job.Title,
"\nAverage Salary: $", Avg.Salary.K*1000,
"\nLocation", City,",","State"))) +
geom_point()
ggplotly(p, tooltip = "text") %>%
style(hoveron = "fill")
}
ui = fluidPage(
plotlyOutput("state_scatter")
)
server = function(input, output) {
output$state_scatter <- renderPlotly({
scatterplot(datasal2)
})
}
shinyApp(ui, server)
datasal2
colnames(datasal2)
scatterplot = function(df) {
p = ggplot(df, aes(Avg.Salary.K.,
cost.of.living,
col = region,
text = paste(
"Company:", Company.Name,
"\nJob Title:", Job.Title,
"\nAverage Salary: $", Avg.Salary.K.*1000,
"\nLocation", City,",","State"))) +
geom_point()
ggplotly(p, tooltip = "text") %>%
style(hoveron = "fill")
}
ui = fluidPage(
plotlyOutput("state_scatter")
)
server = function(input, output) {
output$state_scatter <- renderPlotly({
scatterplot(datasal2)
})
}
shinyApp(ui, server)
source("~/.active-rstudio-document", echo=TRUE)
datasal
datasal %>%
g
datasal %>%
separate(`Company Name`, c('Company', "Rating"), sep = "\n") %>%
select("Company")
datasal[177,]
datasal[177,]$`Company Name`
datasal[267,]$`Company Name`
datasal[301,]$`Company Name`
datasal[371,]$`Company Name`
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?paste
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
colnames(datasal2)
source("~/.active-rstudio-document", echo=TRUE)
unique(datasal2$Industry)
unique(datasal2$Sector)
datasal2[which(unique(datasal2$Industry)),]
datasal2[which(datasal2$Industry == -1),]
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
runApp('~/Downloads/Final_port_2/R Portfolio 2.R')
runApp('ShinyAppSalvCOL.R')
runApp('ShinyAppSalvCOL.R')
runApp('ShinyAppSalvCOL.R')
unique(which(states$region == "Midwest"))
unique(states[which(states$region == "Midwest"),])
unique(states[which(states$region == "Midwest"),]$postal)
unique(states[which(states$region == "Midwest"),]$postal) %>%
sort(-n)
sort()
sort(unique(states[which(states$region == "Midwest"),]$postal))
runApp('ShinyAppSalvCOL.R')
sort(unique(states[which(states$region == "Northeast"),]$postal))
runApp('ShinyAppSalvCOL.R')
sort(unique(states[which(states$region == "South"),]$postal))
sort(unique(states[which(states$region == "West"),]$postal))
runApp('ShinyAppSalvCOL.R')
runApp('ShinyAppSalvCOL.R')
datasal
runApp('ShinyAppSalvCOL.R')
runApp('ShinyAppSalvCOL.R')
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(sf)
library(usmap)
library(tidyverse)
library(plotly)
library(rnaturalearth)
library(tidyverse)
# Read in data
data = read_csv("https://github.com/jyang0620/stat479visproject/raw/main/DSsalary.csv")
data$state = data$State
head(data)#
# data set only includes information for 37 of the states
# states = unique(data$State)
# colnames(data)
# col2 = read_sf("https://github.com/jyang0620/stat479visproject/raw/main/DSsalary.csv")
# # #%>%
# #   group_by(State) %>%
# #   summarise(
# #     avg_salary = mean(as.numeric(`Avg Salary(K)`)),
# #     cost_of_living = mean(as.numeric(cost.of.living)),
# #     state = State
# #   )
# states <- ne_states("United States of America") %>%
#       st_as_sf() %>%
#       rmapshaper::ms_simplify() %>% # reduce size for easy plotting
#       filter(!(name %in% c("Alaska", "Hawaii"))) %>%
#       select(name, geometry, postal) %>%
#       rename(state = name)
# head(states)
# states %>% left_join(col2, by = c("State", "postal"))
col = as.data.frame( data %>%
group_by(state) %>%
summarise(
avg_salary = mean(`Avg Salary(K)`),
cost_of_living = mean(cost.of.living)
))
# col_map <- col %>% ggplot()+
#   geom_sf(aes(fill = cost_of_living))+
#   scale_fill_continuous(
#     low = "white", high = "dark green", name = "Cost of living Index", label = scales::comma
#   )+
#   labs(title = "Cost of Living by State")
# col_map
plot_usmap(data = col, values = "cost_of_living", color = "dark green") +
scale_fill_continuous(
low = "white", high = "dark green", name = "Cost of living Index", label = scales::comma
)+
labs(title = "Cost of Living By State")+
theme(legend.position = "right")
# plot_usmap(data = col, values = "avg_salary", color = "black") +
#   scale_fill_continuous(name = "Average Salary", type = "viridis") +
#   labs(title = "Average Salary By State")+
#   theme(legend.position = "right")
getwd()
ls
ls()
getwd()
runApp('ShinyAppSalvCOL.R')
runApp()
runApp('~/Downloads/portfolio3.R')
runApp('~/Downloads/portfolio3 (1).R')
library(tidyverse)
library(lubridate)
library(shiny)
library(shinyWidgets)
library(plotly)
runApp('~/Downloads/portfolio3 (1).R')
?as_tibble
library(tsibble)
runApp('~/Downloads/portfolio3 (1).R')
